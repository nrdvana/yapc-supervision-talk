9453

This talk is about running perl scripts as services
or, "daemons" under Unux.

I am here with the public service announcement that
THERE IS A BETTER WAY.

For anyone who isn't fully familiar with the problem,
here's a quick recap:
<>
You want to run a perl script as a background service.
  - If the service dies, you want to restart it.
<>
  - You want to be able to start and stop the service.
<>
  - You want to take all the status/error messages
    from the program and log them.  Maybe to syslog.

You do a little research, and find out that the
standard way to do it is
<>
  * Redirect I/O to /dev/null
<>
  * Write all logging to a file or syslog
    (and converting everything to syslog is a pain)
<>
  * Fork and Call setsid() to become a session leader
<>
  * Write a PID file somewhere like /run/ so you know
    what process ID is officially your service.
	(You might also use it as a lockfile to make sure
	only one copy is running.)
<>
But wait
<>
if you're a session leader you happen to
open a tty, you get a controlling terminal!
<>
You can solve that by forking again and call setpgid
<>
Oh, and what if we can't write to /run?
<>
We should make the PID file configurable.
<>  
And what syslog arguments should we use?
<>
Make those configurable too...
<>
But wait, it's really hard to debug a program that
daemonizes.
<>
So, add an option to not daemonize.
<>
Ok, back to our goals:
  
If it dies, we want to restart it.
<>
But how do we know?  Check from cron?  Every...
Minute?
<>
Also, PID files cause a race condition!  PIDs get
recycled.
<>
There are many workarounds, but none
really solve the problem.
<>
<>
And to reliably start/stop the service...
<>
Kill based on PID?
using the PID file to prevent multiple instances?
<>
Race conditions and more race conditions.
<>
Ok, Logging.  You wrote your script using syslog,
but what about exceptions,
<>and you want to see warnings too, right?

And what about those pesky modules that print to STDERR?
Maybe
<>
install something to catch anything using STDERR or STDOUT.

What if you're killed by a signal?
Maybe you should
<>
trap them all so you can log the reason your
daemon exited.

But oh no, you called an XS method
<>
that died in a C library and all the important
diagnostics got flushed down /dev/null

also, you can't trap SIGKILL

<>
Your logging is incomplete!
<>
So how do we fix this?

The real problem is that everything you did to
"daemonize" your script
<>
is breaking the Unix model.

<>
A parent spawns a child process.
The parent gets a PID to refer to the child.
There are NO race conditions when the parent uses the
PID because it remains until the parent reaps it.
<>
Every process gets Input, Output, and Diagnostic streams.
The output and diagnostics of a daemon... are the
things you want to log!
<>
So redirect it to a logger!
which in turn writes it to syslog.
<>
Lets call the parent a
<>
"supervisor",

And the child is your service.
<>

And you have, ta-da, Process Supervision.

Now, look what happens
<>
when the child crashes!
<>
The error message, even one printed by a C library,
makes it to the logger!

and the supervisor gets a signal telling it the child died!

Also, say the supervisor was
<>
holding a copy of the pipe that goes to the logger.

So now the supervisor
<>
can start your cleanup script connected to the same pipe,
so no race conditions in the logging.
  
And then your cleanup script can
<>
exec back to the daemon to start it again.

Now!  Lets say you want to
<>
gracefully shut down the service, or send it custom signals.
  
The supervisor can listen on a unix socket at a known path.
And then you ask *it* to send the signal for you.
No race conditions!
<>
The supervisor knows the PID, or if it reaped the daemon
it knows not to send the signal.

Also, it can
<>
synchronize access to control the service.
  
Ok, to recap:
<>

  * Your daemon no longer needs to detach, fork or setsid
  * Your daemon no longer needs to write a PID file,
     because the parent knows the PID.
  * Your daemon no longer needs to use syslog, or provide
     options to configure it.
  * All errors logged, even SIGKILL
  * No more race conditions when managing the service.
  * No polling from cron!
<>
Ok, so what tools are available to do this?

  * Original was "daemontools", by Dan Berstien, of Qmail fame.
<>
  * then there's the popular successor "runit"
<>
  * and we have "perp", "s6", and my own invention,"daemonproxy"
<>
  * there's also the system-wide init replacements like
    upstart and systemd, but they're bloated by comparison,
	and very "global".
	upstart links against tons of libraries, including libdbus.
	where runit is static and uses less ram than any process on
	my whole system, and I can run any number of them.

No time to show all the varieties and options,
but if this talk has you interested
<>
I would encourage you to read the manuals of
these tools:

I was going to show an example of how to use runit, but
that added about 2 minutes to my talk, so you'll have to
explore on your own.  I will just say that runit and perp
and s6 all have learning curves that can take you entire
minutes to learn.

Now, why am I advertising 4 tools? because supervision is
a really simple thing to implement, and so each person
likes to do it their own way.  Bike-shedding and etc.

runit, perp, and s6 are all nice tools with decent testing.

If however, you decide to write your own, I suggest
you extend daemonproxy with a perl script.  Read the docs
and I think you'll agree.

Also, the s6 guy has a lot of great rants about
supervision and logging.  You should read them.

And if you are using Log::Any, which you should be,
I have a small adapter that gives you daemontools-friendly
logging, with prefixes like "error:".

Also, these links are listed in the POD for that module.
